"use strict";(self.webpackChunkalosaur_docs=self.webpackChunkalosaur_docs||[]).push([[999],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return d}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},u=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(t),d=o,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return t?n.createElement(f,c(c({ref:r},u),{},{components:t})):n.createElement(f,c({ref:r},u))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=m;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=t[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6149:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var n=t(7462),o=t(3366),a=(t(7294),t(3905)),c=["components"],i={sidebar_position:5},s="Microservice",l={unversionedId:"techniques/Microservice",id:"techniques/Microservice",isDocsHomePage:!1,title:"Microservice",description:"Microservices in Alosaur are implemented as a server, but use a different transport, not HTTP, to communicate between clients.",source:"@site/docs/techniques/Microservice.md",sourceDirName:"techniques",slug:"/techniques/Microservice",permalink:"/docs/techniques/Microservice",editUrl:"https://github.com/alosaur/alosaur.github.io/edit/main/docs/techniques/Microservice.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"CORS",permalink:"/docs/techniques/CORS"},next:{title:"Database",permalink:"/docs/techniques/Database"}},u=[{value:"Server",id:"server",children:[]},{value:"Controller actions",id:"controller-actions",children:[]},{value:"Client",id:"client",children:[]}],p={toc:u};function m(e){var r=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"microservice"},"Microservice"),(0,a.kt)("p",null,"Microservices in Alosaur are implemented as a server, but use a different transport, not HTTP, to communicate between clients. "),(0,a.kt)("p",null,"Microservices maintain the same structure as a regular http server, except for the controller methods."),(0,a.kt)("h3",{id:"server"},"Server"),(0,a.kt)("p",null,"To create a normal microservice, you need to create this application and start listening to events."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Microservice, MicroserviceType } from "alosaur/microservice/mod.ts";\nimport { HomeArea } from "./home.area.ts";\n\nconst server = new Microservice({\n  areas: [HomeArea],\n  type: MicroserviceType.TCP,\n  config: {\n    hostname: "localhost",\n    port: 4500,\n  },\n});\n\nawait server.listen();\n')),(0,a.kt)("h3",{id:"controller-actions"},"Controller actions"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"@MPattern -")," is a method decorator that can accept Object"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"@MEvent -")," is a method decorator that can take string"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Area, Body, Controller } from "alosaur/mod.ts";\nimport { MEvent, MPattern } from "alosaur/microservice/mod.ts";\n\n@Controller()\nexport class HomeController {\n  @MPattern({ cmd: "sum" })\n  async sum(@Body() body: number[]) {\n    return Array.isArray(body) ? body.reduce((acc, cur) => acc + cur, 0) : 0;\n  }\n\n  @MEvent("calculated")\n  async event(@Body() body: string) {\n    return body;\n  }\n}\n\n@Area({\n  controllers: [HomeController],\n})\nexport class HomeArea {}\n')),(0,a.kt)("h3",{id:"client"},"Client"),(0,a.kt)("p",null,"We will use the usual Alosaur application as an example and create a default client."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { App } from "alosaur/mod.ts";\nimport { CoreArea } from "./areas/core.area.ts";\nimport { MsTcpClient } from "alosaur/microservice/mod.ts";\n\nconst app = new App({\n  areas: [CoreArea],\n  providers: [\n    {\n      token: "TCP_CLIENT",\n      useFactory: () => new MsTcpClient({ hostname: "localhost", port: 4500 }),\n    },\n  ],\n  logging: false,\n});\n\napp.listen();\n')),(0,a.kt)("p",null,"Using the client inside the application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Area, Controller, Get, Inject } from "alosaur/mod.ts";\nimport { MsTcpClient } from "alosaur/microservice/mod.ts";\n\n@Controller()\nexport class CoreController {\n  constructor(@Inject("TCP_CLIENT") private client: MsTcpClient) {\n  }\n\n  @Get()\n  async text() {\n    const answer = await this.client.send({ cmd: "sum" }, [1, 2, 3, 4]);\n    return "Hello world, " + answer;\n  }\n}\n\n@Area({\n  controllers: [CoreController],\n})\nexport class CoreArea {}\n')),(0,a.kt)("p",null,"Full application example: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/alosaur/alosaur/tree/master/examples/microservice"},"https://github.com/alosaur/alosaur/tree/master/examples/microservice")))}m.isMDXComponent=!0}}]);