"use strict";(self.webpackChunkalosaur_docs=self.webpackChunkalosaur_docs||[]).push([[385],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(i,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3581:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],s={sidebar_position:3},i="Controllers",p={unversionedId:"basics/Controllers",id:"basics/Controllers",isDocsHomePage:!1,title:"Controllers",description:"Controllers are responsible for processing incoming requests and returning responses to the client.",source:"@site/docs/basics/Controllers.md",sourceDirName:"basics",slug:"/basics/Controllers",permalink:"/docs/basics/Controllers",editUrl:"https://github.com/alosaur/alosaur.github.io/edit/main/docs/basics/Controllers.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Area",permalink:"/docs/basics/Area"},next:{title:"Context, Request, Response",permalink:"/docs/basics/Context"}},u=[{value:"Routing",id:"routing",children:[]},{value:"<strong>Controller Actions</strong>",id:"controller-actions",children:[{value:"Action Parameters",id:"action-parameters",children:[]},{value:"Multipart form-data, upload files",id:"multipart-form-data-upload-files",children:[]}]},{value:"Action outputs: Content, View, Redirect",id:"action-outputs-content-view-redirect",children:[]}],c={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"controllers"},"Controllers"),(0,o.kt)("p",null,"Controllers are responsible for processing incoming requests and returning responses to the client."),(0,o.kt)("p",null,"The purpose of a controller is to receive specific requests for an application. The routing mechanism controls which controller receives which requests. Often each controller has more than one route, and different routes can perform different actions. We use classes and decorators to create the underlying controller."),(0,o.kt)("p",null,"You can use the CLI to create a controller:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"deno run --allow-read --allow-write --allow-net https://deno.land/x/alosaur/cli.ts g controller \nMyController \n")),(0,o.kt)("h3",{id:"routing"},"Routing"),(0,o.kt)("p",null,"The routing in Alosaur is registered at the moment when the application is created. In order to define routes in an application, they are usually laid inside the Controller, Get and other decorators:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { App, Area, Controller, Get } from "https://deno.land/x/alosaur/mod.ts";\n\n@Controller() // or specific path @Controller("/home")\nexport class HomeController {\n  @Get() // or specific path @Get("/hello")\n  text() {\n    return "Hello world";\n  }\n}\n\n// Declare module\n@Area({\n  controllers: [HomeController],\n})\nexport class HomeArea {}\n\n// Create alosaur application\nconst app = new App({\n  areas: [HomeArea],\n});\n\napp.listen();\n')),(0,o.kt)("p",null,"In this application, call the GET ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:3000/"},"localhost:8000")," request (8000 is the standard Alosaur port)"),(0,o.kt)("h2",{id:"controller-actions"},(0,o.kt)("strong",{parentName:"h2"},"Controller Actions")),(0,o.kt)("p",null,"Application routing is based on these methods by labeled route decorators:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Get")," "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Post")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Put")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Patch")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Delete")),(0,o.kt)("p",null,"A route can either take a string as input or remain empty, in which case it will give the default value to the controller. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'@Get()\ndefaultReturnTextAction() {\n        return "Hello world!";\n}\n\n@Get("/hi")\nsayHiTextAction() {\n        return "Hi!";\n}\n')),(0,o.kt)("h3",{id:"action-parameters"},"Action Parameters"),(0,o.kt)("p",null,"Each route can take different parameters and they can also be marked with decorators."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'@Post("/")\nCreate(@Body() product: Product) {\n  // @Body - action parameter \n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"@Cookie")),(0,o.kt)("p",null,"Implements a Cookie in the parameter request received from getCookies ",(0,o.kt)("a",{parentName:"p",href:"https://deno.land/std@0.103.0/http"},"https://deno.land/std@0.103.0/http")," "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"@Ctx")),(0,o.kt)("p",null,"Introduces context object parameter (HttpContext, AuthContext)"),(0,o.kt)("p",null,"Can contain ",(0,o.kt)("inlineCode",{parentName:"p"},"request"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"response"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," and many other things that are directly related to the current request"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"@Req")),(0,o.kt)("p",null,"Implements a ",(0,o.kt)("inlineCode",{parentName:"p"},"AlosaurRequest")," object in the parameter"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"@Res")),(0,o.kt)("p",null,"Implements a ",(0,o.kt)("inlineCode",{parentName:"p"},"AlosaurResponse")," object in the parameter"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"@Param")),(0,o.kt)("p",null,"Pulls the key parameter from the url and embeds it in the method parameter "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'// Example request\n// /controller/123\n\n@Get("/:id")\nGetById(@Param("id") id: number) {\n   // id = 123\n}\n\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"@QueryParam")),(0,o.kt)("p",null,"Pulls the key parameter from the url query and embeds it in the method parameter "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'Request to "/test?name=john&city=London"\n\n@Get("/test")\n  query(\n    @QueryParam("name") name: string,\n    @QueryParam("city") city: string) {\n  // name = john \n  // city = London\n\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"@QueryParams")),(0,o.kt)("p",null,"Pulls a parameter from the url query and embeds it in the method parameter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'Request to "/test?name=john&city=London"\n\n@Get("/test")\n  query(@QueryParams() query: any) {\n  // query.name = john \n  // query.city = London\n\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"@Body")),(0,o.kt)("p",null,"Pulls its body from the request and implements it in the method parameter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'curl --header "Content-Type: application/json" \\\n  --request POST \\\n  --data \'{"type":"tea","name":"Ceilon"}\' \\\n  http://localhost:8000/api/product\n\ninterface Product {\n    type: string;\n  name: string;\n}\n\n@Post("/")\nCreate(@Body() product: Product) {\n  \n}\n')),(0,o.kt)("p",null,"Body can take in various transformers, you can turn on the default serializer to configure this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const { plainToClass } = "[https://jspm.dev/class-transformer@0.2.3](https://jspm.dev/class-transformer@0.2.3)";\n\n// add transform function\napp.useTransform({\n  type: "body", // parse body params\n  getTransform: (transform: any, body: any) => {\n    return plainToClass(transform, body);\n  },\n});\n')),(0,o.kt)("p",null,"This can be well combined with various validators, such as class-validator:"),(0,o.kt)("p",null,"post.model.ts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import validator from "https://jspm.dev/class-validator@0.8.5";\n\nconst { Length, Contains, IsInt, Min, Max, IsEmail, IsFQDN, IsDate } =\n  validator;\n\nexport class PostModel {\n  @Length(10, 20)\n  title?: string;\n\n  @Contains("hello")\n  text?: string;\n\n  @IsInt()\n  @Min(0)\n  @Max(10)\n  rating?: number;\n\n  @IsEmail()\n  email?: string;\n}\n')),(0,o.kt)("p",null,"app.ts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import validator from "https://jspm.dev/class-validator@0.8.5";\nimport transformer from "https://jspm.dev/class-transformer@0.2.3";\nimport {\n  App,\n  Area,\n  Body,\n  Controller,\n  Post,\n} from "https://deno.land/x/alosaur/mod.ts";\nimport { PostModel } from "./post.model.ts";\n\nconst { validate } = validator;\nconst { plainToClass } = transformer;\n\n// Create controller\n@Controller()\nexport class HomeController {\n  @Post("/")\n  async post(@Body(PostModel) data: PostModel) {\n    return {\n      data,\n      errors: await validate(data),\n    };\n  }\n}\n\n// Declare controller in area\n@Area({\n  controllers: [HomeController],\n})\nexport class HomeArea {}\n\n// Create app\nconst app = new App({\n  areas: [HomeArea],\n});\n\n// add transform function\napp.useTransform({\n  type: "body", // parse body params\n  getTransform: (transform: any, body: any) => {\n    return plainToClass(transform, body);\n  },\n});\n\n// serve application\napp.listen();\n')),(0,o.kt)("p",null,"You can also insert the custom parser directly into the Body:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function parser(body): ParsedObject {\n    // your code\n    return body;\n}\n\n...\n@Post('/')\npost(@Body(parser) data: ParsedObject) {\n\n}\n")),(0,o.kt)("h3",{id:"multipart-form-data-upload-files"},"Multipart form-data, upload files"),(0,o.kt)("p",null,"The Body Decorator also allows you to extract files from a request."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { FormFile } from "https://deno.land/std@0.102.0/mime/multipart.ts";\nimport { move } from "https://deno.land/std@0.102.0/fs/move.ts";\n\n...\n\n@Post()\nasync formData(@Body() body: { [key: string]: FormFile | string }) {\n  const file: FormFile = body.file as FormFile;\n\n  if (file) {\n    const fileDest = "./examples/form-data/files/" + file.filename;\n\n    // write file if file has content in memory\n    if (file.content) {\n      await Deno.writeFile(fileDest, file.content!, { append: true });\n    } else if (file.tempfile) {\n      // move file if file has tempfile\n      move(file.tempfile, fileDest);\n    }\n\n    return "Uploaded";\n  }\n\n  return "File not exist";\n}\n')),(0,o.kt)("p",null,"You can also add options for parsing files"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@Body(NoopTransform, CustomBodyParser)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const CustomBodyParser: RequestBodyParseOptions = {\n  formData: {\n    maxMemory: 100, // in mb by default 10mb for default parser\n    parser: func, // function of custom parser; (request: ServerRequest, contentType: string) => Promise<any>;\n  },\n};\n")),(0,o.kt)("h2",{id:"action-outputs-content-view-redirect"},"Action outputs: Content, View, Redirect"),(0,o.kt)("p",null,"There are several different options for returning the query result:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Content -")," similar to ",(0,o.kt)("inlineCode",{parentName:"li"},"return {};")," returns Status 200 OK by default"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"View")," - used in conjunction with the Template Engine, you can read more about the template in the Render pages section."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Redirect")," and ",(0,o.kt)("strong",{parentName:"li"},"RedirectPermanent")," returns status ",(0,o.kt)("inlineCode",{parentName:"li"},"301"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"302")," using return ",(0,o.kt)("inlineCode",{parentName:"li"},"Redirect('/to/page')")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Response")," - Object of type ",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/Response"},"Response"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'return {}; // return 200 status\n\n// return 404 status\nreturn Content("Text", 404);\n\n// return 404 status\nreturn Content({ "Object": true }, 404); \n\n// return 404 status\nreturn View("page", 404);\n\n// return 404 status with headers\nreturn new Response("not found", {\n  status: 404,\n  headers: new Headers([["x-alosaur-header","not found"]]);\n})\n')))}m.isMDXComponent=!0}}]);