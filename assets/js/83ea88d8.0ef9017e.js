"use strict";(self.webpackChunkalosaur_docs=self.webpackChunkalosaur_docs||[]).push([[853],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(t),d=o,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7260:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={sidebar_position:6},c="Dependency injection",l={unversionedId:"basics/DI",id:"basics/DI",isDocsHomePage:!1,title:"Dependency injection",description:"Dependency injection (DI) is a mechanism for making objects that interact in an application loosely coupled. Such objects are linked through abstractions, such as interfaces, which makes the whole system more flexible, more adaptable, and more extensible.",source:"@site/docs/basics/DI.md",sourceDirName:"basics",slug:"/basics/DI",permalink:"/docs/basics/DI",editUrl:"https://github.com/alosaur/alosaur.github.io/edit/master/docs/basics/DI.md",version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Middleware",permalink:"/docs/basics/Middleware"},next:{title:"Hooks",permalink:"/docs/basics/Hooks"}},p=[{value:"<strong>Providers</strong>",id:"providers",children:[]},{value:"Custom DI container",id:"custom-di-container",children:[]}],u={toc:p};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dependency-injection"},"Dependency injection"),(0,a.kt)("p",null,"Dependency injection (DI) is a mechanism for making objects that interact in an application loosely coupled. Such objects are linked through abstractions, such as interfaces, which makes the whole system more flexible, more adaptable, and more extensible."),(0,a.kt)("p",null,"Often special containers - IoC-containers (Inversion of Control) - are used to set dependencies in such systems. Such containers serve as a kind of factories that establish dependencies between abstractions and concrete objects, and usually manage the creation of these objects."),(0,a.kt)("p",null,"Alosaur currently has an embedded container created with ",(0,a.kt)("inlineCode",{parentName:"p"},"microsoft/TSyringe")," . The default providers are automatically resolved in the controller and hook constructors."),(0,a.kt)("p",null,"For more details on this implementation, see ",(0,a.kt)("strong",{parentName:"p"},"TSyringe for Alosaur")," ","[https://github.com/alosaur/alosaur/tree/master/src/injection]"," (",(0,a.kt)("a",{parentName:"p",href:"https://github.com/alosaur/alosaur/tree/master/src/injection"},"https://github.com/alosaur/alosaur/tree/master/src/injection"),")."),(0,a.kt)("p",null,"A simple example of use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'**// Service**\n\nexport class FooService {\n  getName(): string {\n    return "My name is Foo";\n  }\n**}\n\n// Instance of controller**\n\n@Controller("/home")\nexport class HomeController {\n\n  constructor(private service: FooService) {}\n\n  @Get("/text")\n  text(@QueryParam("name") name: string) {\n    return `Hey! ${this.service.getName()}, ${name}`;\n  }\n}\n\n****@Area({\n  controllers: [HomeController],\n})\nexport class HomeArea {\n}\n\n**// Create app**\n\nconst app = new App({\n  areas: [HomeArea],\n  logging: false,\n});\n\napp.listen();\n')),(0,a.kt)("h2",{id:"providers"},(0,a.kt)("strong",{parentName:"h2"},"Providers")),(0,a.kt)("p",null,"You can register providers at different levels of Injectable container: App, Area, Controller and use in Hook."),(0,a.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"}," Read more on the page: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/alosaur/alosaur/tree/master/src/injection#providers"},"https://github.com/alosaur/alosaur/tree/master/src/injection#providers")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"ProviderDeclaration")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Rewrite injectable in App\nconst app = new App({\n  providers: []\n})\n\n// Rewrite injectable in Area\n@Area({\n  providers: []\n})\n\n// Rewrite injectable in Controller\n@Controller({\n  providers: []\n})\n")),(0,a.kt)("h2",{id:"custom-di-container"},"Custom DI container"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { App, InternalDependencyContainer } from "alosaur/mod.ts";\nimport { FooService } from "./services/foo.service.ts";\n\nconst container = new InternalDependencyContainer();\n\nconst service = new FooService();\nservice.setName("Bar");\n\ncontainer.registerInstance("FooService", service);\n\nconst app = new App({\n  areas: [HomeArea],\n  container,\n});\n\napp.listen();\n')))}m.isMDXComponent=!0}}]);